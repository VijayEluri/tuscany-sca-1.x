<!--
  Copyright (c) 2005 The Apache Software Foundation or its licensors, as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>

    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

    <meta http-equiv="Content-Style-Type" content="text/css">
    <title>Tuscany Hello World JSON-RPC Sample</title><!-- LINK rel="stylesheet" href="ait.css" type="text/css" --></head>

<body>

<h2>Tuscany Hello World JSON-RPC Sample</h2>

<h3>Overview</h3>

<p>The Tuscany hello world JSON-RPC sample shows using the Tuscany SCA
    runtime in a Tomcat environment being accessed from a JavaScript program running in the client browser that
    implements the classic introductory hello world example. </p>


<h3>Setup</h3>Set up your server as described in the <a href="../../readme.htm" target="_blank">Tomcat
    Setup</a>. &nbsp;If you are not configuring with the acceptance test the server, you will need to add <span
        style="font-weight: bold;">helloworldjsonrpc-SNAPSHOT.war</span> to your tomcat's webapp directory.<br>

<h3>Running</h3>

Once you've started your web server, use your browse to view the
following URL: <a href="http://localhost:8080/helloworldjsonrpc-SNAPSHOT/" target="_blank">http://localhost:8080/helloworldjsonrpc-SNAPSHOT/</a>
<br>

You should see a form you can supply your name and a button.
&nbsp;Once you click the button the JavaScript program locates the SCA component to execute
the greeting service.
<br>
Note, unlike the J2SE or JSP clients the Tuscany runtime is automatically
initialized and running.
<h3>Results</h3>

<p>The page should be updated with the greeting displayed below
    the form.<br>

</p>

<h3>Code Overview</h3>

The source files are physically organized as shown below:<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
    <tbody>
        <tr>
            <td>
                <pre>+---main<br>&brvbar;   +---java<br>&brvbar;       &brvbar;   sca.module       
        +---org<br>&brvbar;           +---apache<br>&brvbar;               +---tuscany<br>&brvbar;                   +---samples<br>&brvbar;                       +---helloworldjsonrpc
                            &brvbar;   HelloWorldService.java
                            &brvbar;   HelloWorldServiceComponentImpl.java<br>+---webapp
    &brvbar;   helloworld.js
    &brvbar;   HelloWorldJSONRPC.html
    +---WEB-INF<br>        &brvbar;   web.xml<br></pre>
            </td>
        </tr>
    </tbody>
</table>
<br>
<br>

<p>&nbsp;</p>

<table style="text-align: left; width: 100%; height: 154px;" border="0" cellpadding="2" cellspacing="2">

    <tbody>

        <tr>

            <td style="vertical-align: top;">sca.module</td>

            <td>Defines the SCA module, entryPoint and component. Defines an entryPoint with an JSON-RPC binding, and the
                HelloWorldService component and the Java class that
                implements that component</td>

        </tr>

        <tr>

            <td style="vertical-align: top;">HelloWorldService.java</td>

            <td>Defines the Java interface implemented by the component.</td>

        </tr>

        <tr>

            <td style="vertical-align: top;">HelloWorldServiceComponentImpl.java</td>

            <td>Implements the SCA component. Uses the SCA service
                annotation tag on the class to show what SCA interface is being
                implemented.</td>

        </tr>

        <tr>
            <td>helloworld.js</td>
            <td>Handles invoking the HelloWorld SCA service. Gets the value entered in the text field on the web page, invokes the SCA component and puts the result in the output field on the web page.
                <br>The interesting part of the script is &nbsp;SCA.HelloWorldService.getGreetings(who) &nbsp;. 
                In the SCA JSON-RPC environment all entryPoints with an JSON-RPC binding are bound to the automatically defined script variable &nbsp;SCA.&nbsp;.
            </td>
        </tr>

        <tr>
            <td>HelloWorldJSONRPC.html</td>
            <td>The HTML page for the sample. Creates a text box for the user to enter their name, a button to click to get the greeting, and a text field to show the response.
                The helloworld.js script function getGreeting is used to invoke the SCA service when the button is clicked.
                To initialize the SCA environment the sca.js script must be defined as the first script in the HTML with the following line:<br>
                    &lt;script type="text/javascript" src="SCA/scripts/sca.js"></script&gt;
        </tr>

        <tr>
            <td>web.xml</td>
            <td>Standard J2EE web application's web.xml</td>
        </tr>

    </tbody>
</table>

<br>

</body></html>
