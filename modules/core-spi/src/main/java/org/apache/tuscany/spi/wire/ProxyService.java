/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.    
 */
package org.apache.tuscany.spi.wire;

import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;

import org.apache.tuscany.assembly.Contract;
import org.apache.tuscany.interfacedef.IncompatibleInterfaceContractException;
import org.osoa.sca.CallableReference;

/**
 * Creates proxies that implement Java interfaces and invocation handlers for fronting wires
 *
 * @version $$Rev$$ $$Date$$
 */

public interface ProxyService {

    /**
     * Creates a Java proxy for the given wire
     *
     * @param interfaze the interface the proxy implements
     * @param wire      the wire to proxy @return the proxy
     * @throws ProxyCreationException
     * @Deprecated
     */
    <T> T createProxy(Class<T> interfaze, Wire wire) throws ProxyCreationException;

    /**
     * Creates a Java proxy for the given wire
     *
     * @param interfaze the interface the proxy implements
     * @param wire      the wire to proxy @return the proxy
     * @param mapping   the method to chain holder mapping to use in creating the proxy. Clients may cache and resuse
     *                  this mapping for performance.
     * @throws ProxyCreationException
     * @Deprecated
     */
    <T> T createProxy(Class<T> interfaze, Wire wire, Map<Method, ChainHolder> mapping)
        throws ProxyCreationException;

    /**
     * Creates a Java proxy for the service contract callback
     *
     * @param interfaze the interface the proxy should implement
     * @return the proxy
     * @throws ProxyCreationException
     * @Deprecated
     */
    Object createCallbackProxy(Class<?> interfaze, List<Wire> wires) throws ProxyCreationException;

    /**
     * Cast a proxy to a CallableReference.
     *
     * @param target a proxy generated by this implementation
     * @return a CallableReference (or subclass) equivalent to this prozy
     * @throws IllegalArgumentException if the object supplied is not a proxy
     */
    <B, R extends CallableReference<B>> R cast(B target) throws IllegalArgumentException;

}
